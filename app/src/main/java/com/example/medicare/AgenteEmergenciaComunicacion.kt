package com.example.medicare

import android.app.AlarmManager
import android.os.Handler
import android.os.Looper
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.Service
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.net.Uri
import android.provider.ContactsContract
import android.database.Cursor
import android.os.Build
import android.os.Bundle
import android.os.IBinder
import android.util.Log
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.NotificationCompat
import org.greenrobot.eventbus.EventBus
import org.greenrobot.eventbus.Subscribe
import org.greenrobot.eventbus.ThreadMode
import kotlinx.coroutines.*
import okhttp3.*
import com.google.gson.Gson
import java.io.IOException
import java.text.SimpleDateFormat
import java.util.*
import java.util.concurrent.TimeUnit

class AgenteEmergenciaComunicacion(private val context: Context) {

    private val tag = "AgenteEmergencia"
    private val gson = Gson()
    private val client = OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .build()

    private val coroutineScope = CoroutineScope(Dispatchers.Main + SupervisorJob())

    // Configuraci√≥n por defecto para Telegram (debe ser configurado por el usuario)
    private var configuracionTelegram: ConfiguracionTelegram? = null

    init {
        try {
            // Registrar el agente en EventBus
            EventBus.getDefault().register(this)
            Log.d(tag, "‚úÖ Agente de Emergencia inicializado correctamente")
            Log.i(tag, "üìä Estado inicial - EventBus registrado, Cliente HTTP configurado")

            // Mostrar mensaje en pantalla
            Handler(Looper.getMainLooper()).post {
                Toast.makeText(context, "üö® Sistema de Emergencia INICIADO", Toast.LENGTH_SHORT).show()
            }
        } catch (e: Exception) {
            Log.e(tag, "‚ùå ERROR al inicializar Agente de Emergencia", e)
            Handler(Looper.getMainLooper()).post {
                Toast.makeText(context, "‚ùå Error al iniciar sistema emergencia", Toast.LENGTH_LONG).show()
            }
        }
    }

    // === MANEJO DE EVENTOS ===

    @Subscribe(threadMode = ThreadMode.BACKGROUND)
    fun onMedicamentoPostergado(event: MedicamentoPostergadoEvent) {
        Log.d(tag, "üìã Evento recibido: Medicamento postergado")
        Log.i(tag, "üíä Medicamento: ${event.nombreMedicamento}")
        Log.i(tag, "‚è±Ô∏è Tiempo postergado: ${event.tiempoPostergado} minutos")
        Log.i(tag, "üîÑ Postergaci√≥n n√∫mero: ${event.numeroPostergacion}")

        when {
            event.numeroPostergacion >= 4 -> {
            Log.e(tag, "üÜò ACTIVANDO PROTOCOLO CR√çTICO: Llamada de emergencia (60+ min, 4+ postergaciones)")
            realizarLlamadaEmergencia(event)
            }
            event.numeroPostergacion >= 3 -> {
                Log.w(tag, "‚ö†Ô∏è ACTIVANDO PROTOCOLO: Mensaje de emergencia (45+ min, 3+ postergaciones)")
                enviarMensajeEmergencia(event)
            }
            else -> {
                Log.d(tag, "üìä Condiciones no cumplidas para emergencia - continuando monitoreo")
            }
        }
    }

    @Subscribe(threadMode = ThreadMode.BACKGROUND)
    fun onMedicamentoNoTomado(event: MedicamentoNoTomadoEvent) {
        Log.d(tag, "üìã Evento recibido: Medicamento no tomado")
        Log.i(tag, "üíä Medicamento: ${event.nombreMedicamento}")
        Log.i(tag, "‚è±Ô∏è Tiempo transcurrido: ${event.tiempoTranscurrido} minutos")

        if (event.tiempoTranscurrido >= 15) {
            Log.w(tag, "‚ö†Ô∏è ACTIVANDO PROTOCOLO: Mensaje por medicamento no tomado (45+ minutos)")
            enviarMensajeEmergenciaMedicamentoNoTomado(event)
        } else {
            Log.d(tag, "üìä A√∫n no se cumple tiempo l√≠mite para emergencia (${event.tiempoTranscurrido}/45 min)")
        }
    }

    // === CONFIGURACI√ìN ===

    fun configurarTelegram(botToken: String, chatId: String) {
        try {
            configuracionTelegram = ConfiguracionTelegram(botToken, chatId)
            Log.d(tag, "‚úÖ Telegram configurado correctamente")
            Log.i(tag, "ü§ñ Bot Token: ${botToken.take(10)}...")
            Log.i(tag, "üí¨ Chat ID: $chatId")

            Handler(Looper.getMainLooper()).post {
                Toast.makeText(context, "‚úÖ Telegram configurado", Toast.LENGTH_SHORT).show()
            }
        } catch (e: Exception) {
            Log.e(tag, "‚ùå Error al configurar Telegram", e)
            Handler(Looper.getMainLooper()).post {
                Toast.makeText(context, "‚ùå Error config Telegram", Toast.LENGTH_SHORT).show()
            }
        }
    }

    // === OBTENCI√ìN DE CONTACTO DE EMERGENCIA ===

    private fun obtenerContactoEmergencia(): ContactoEmergencia? {
        Log.d(tag, "üîç Buscando contacto de emergencia en agenda...")

        try {
            val cursor: Cursor? = context.contentResolver.query(
                ContactsContract.CommonDataKinds.Phone.CONTENT_URI,
                arrayOf(
                    ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME,
                    ContactsContract.CommonDataKinds.Phone.NUMBER
                ),
                "${ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME} LIKE ?",
                arrayOf("%contacto emergencia%"),
                null
            )

            cursor?.use {
                if (it.moveToFirst()) {
                    val nombre = it.getString(it.getColumnIndexOrThrow(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME))
                    val telefono = it.getString(it.getColumnIndexOrThrow(ContactsContract.CommonDataKinds.Phone.NUMBER))

                    Log.d(tag, "‚úÖ Contacto de emergencia encontrado: $nombre - $telefono")
                    return ContactoEmergencia(nombre, telefono.replace("\\s".toRegex(), ""))
                } else {
                    Log.w(tag, "‚ö†Ô∏è Cursor vac√≠o - no hay contactos que coincidan")
                }
            } ?: run {
                Log.w(tag, "‚ö†Ô∏è Cursor nulo - problema de permisos o acceso a contactos")
            }
        } catch (e: Exception) {
            Log.e(tag, "‚ùå Error al obtener contacto de emergencia", e)
        }

        Log.e(tag, "‚ùå No se encontr√≥ contacto de emergencia")
        Handler(Looper.getMainLooper()).post {
            Toast.makeText(context, "‚ùå Sin contacto emergencia", Toast.LENGTH_SHORT).show()
        }
        return null
    }

    // === ENV√çO DE MENSAJES POR TELEGRAM ===

    private fun enviarMensajeEmergencia(event: MedicamentoPostergadoEvent) {
        Log.d(tag, "üì§ Iniciando env√≠o de mensaje de emergencia...")

        val contacto = obtenerContactoEmergencia()
        if (contacto == null) {
            Log.e(tag, "‚ùå No se puede enviar mensaje: contacto no encontrado")
            Handler(Looper.getMainLooper()).post {
                Toast.makeText(context, "‚ùå Sin contacto para emergencia", Toast.LENGTH_LONG).show()
            }
            return
        }

        val fechaHora = SimpleDateFormat("dd/MM/yyyy HH:mm", Locale.getDefault())
            .format(Date(event.fechaHoraOriginal))

        val mensaje = """
            üö® ALERTA MEDICAMENTO üö®
            
            El usuario no ha tomado su medicamento:
            üíä Medicamento: ${event.nombreMedicamento}
            ‚è∞ Hora programada: $fechaHora
            ‚è±Ô∏è Tiempo transcurrido: ${event.tiempoPostergado} minutos
            üìä Postergaciones: ${event.numeroPostergacion}
            
            Por favor, contacte al usuario para verificar su estado.
            
            Contacto de emergencia: ${contacto.nombre}
        """.trimIndent()

        Log.i(tag, "üìù Mensaje generado: ${mensaje.length} caracteres")
        enviarMensajeTelegram(mensaje)

        // Notificar al sistema sobre la acci√≥n tomada
        EventBus.getDefault().post(
            ContactoEmergenciaEvent(
                contacto.nombre,
                contacto.telefono,
                "MENSAJE"
            )
        )

        Log.d(tag, "üì® Evento ContactoEmergenciaEvent enviado (MENSAJE)")
    }

    private fun enviarMensajeEmergenciaMedicamentoNoTomado(event: MedicamentoNoTomadoEvent) {
        Log.d(tag, "üì§ Iniciando mensaje por medicamento no tomado...")

        val contacto = obtenerContactoEmergencia()
        if (contacto == null) {
            Log.e(tag, "‚ùå No se puede enviar mensaje: contacto no encontrado")
            return
        }

        val fechaHora = SimpleDateFormat("dd/MM/yyyy HH:mm", Locale.getDefault())
            .format(Date(event.fechaHoraOriginal))

        val mensaje = """
            ‚ö†Ô∏è MEDICAMENTO NO TOMADO ‚ö†Ô∏è
            
            üíä Medicamento: ${event.nombreMedicamento}
            ‚è∞ Hora programada: $fechaHora
            ‚è±Ô∏è Tiempo sin tomar: ${event.tiempoTranscurrido} minutos
            
            El usuario no ha confirmado la toma del medicamento.
            Por favor, verifique su estado.
            
            Contacto de emergencia: ${contacto.nombre}
        """.trimIndent()

        Log.i(tag, "üìù Mensaje no tomado generado: ${mensaje.length} caracteres")
        enviarMensajeTelegram(mensaje)
    }

    private fun enviarMensajeTelegram(mensaje: String) {
        val config = configuracionTelegram
        if (config == null) {
            Log.e(tag, "‚ùå Telegram no est√° configurado - no se puede enviar mensaje")
            Handler(Looper.getMainLooper()).post {
                Toast.makeText(context, "‚ùå Telegram no configurado", Toast.LENGTH_SHORT).show()
            }
            return
        }

        Log.d(tag, "üöÄ Enviando mensaje a Telegram...")
        Log.i(tag, "üåê URL: https://api.telegram.org/bot[TOKEN]/sendMessage")

        coroutineScope.launch(Dispatchers.IO) {
            try {
                val url = "https://api.telegram.org/bot${config.botToken}/sendMessage"

                val requestBody = FormBody.Builder()
                    .add("chat_id", config.chatId)
                    .add("text", mensaje)
                    .add("parse_mode", "HTML")
                    .build()

                val request = Request.Builder()
                    .url(url)
                    .post(requestBody)
                    .build()

                Log.d(tag, "üì° Realizando petici√≥n HTTP...")

                client.newCall(request).execute().use { response ->
                    if (response.isSuccessful) {
                        Log.d(tag, "‚úÖ Mensaje de Telegram enviado exitosamente")
                        Log.i(tag, "üìä C√≥digo respuesta: ${response.code}")

                        Handler(Looper.getMainLooper()).post {
                            Toast.makeText(context, "‚úÖ Mensaje enviado", Toast.LENGTH_SHORT).show()
                        }
                    } else {
                        Log.e(tag, "‚ùå Error al enviar mensaje de Telegram: ${response.code}")
                        Log.e(tag, "üìÑ Respuesta: ${response.body?.string()}")

                        Handler(Looper.getMainLooper()).post {
                            Toast.makeText(context, "‚ùå Error env√≠o: ${response.code}", Toast.LENGTH_SHORT).show()
                        }
                    }
                }
            } catch (e: IOException) {
                Log.e(tag, "‚ùå Error de red al enviar mensaje de Telegram", e)
                Handler(Looper.getMainLooper()).post {
                    Toast.makeText(context, "‚ùå Error de conexi√≥n", Toast.LENGTH_SHORT).show()
                }
            } catch (e: Exception) {
                Log.e(tag, "‚ùå Error inesperado al enviar mensaje", e)
                Handler(Looper.getMainLooper()).post {
                    Toast.makeText(context, "‚ùå Error inesperado", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }

    // === LLAMADAS DE EMERGENCIA ===

    private fun realizarLlamadaEmergencia(event: MedicamentoPostergadoEvent) {
        Log.e(tag, "üÜò INICIANDO LLAMADA DE EMERGENCIA")
        Log.e(tag, "üíä Medicamento: ${event.nombreMedicamento}")
        Log.e(tag, "‚è±Ô∏è Tiempo cr√≠tico: ${event.tiempoPostergado} minutos")

        val contacto = obtenerContactoEmergencia()
        if (contacto == null) {
            Log.e(tag, "‚ùå CR√çTICO: No se puede realizar llamada - contacto no encontrado")
            Handler(Looper.getMainLooper()).post {
                Toast.makeText(context, "üÜò SIN CONTACTO PARA LLAMADA", Toast.LENGTH_LONG).show()
            }
            return
        }

        try {
            // Primero enviar mensaje cr√≠tico
            val mensajeCritico = """
                üÜò EMERGENCIA MEDICAMENTO üÜò
                
                SITUACI√ìN CR√çTICA:
                üíä Medicamento: ${event.nombreMedicamento}
                ‚è±Ô∏è Sin tomar por: ${event.tiempoPostergado} minutos
                üìä Postergaciones: ${event.numeroPostergacion}
                
                ‚òéÔ∏è LLAMADA AUTOM√ÅTICA INICIADA
                
                CONTACTE INMEDIATAMENTE AL USUARIO
            """.trimIndent()

            Log.w(tag, "üì§ Enviando mensaje cr√≠tico antes de llamar...")
            enviarMensajeTelegram(mensajeCritico)

            // Realizar llamada autom√°tica
            val intent = Intent(Intent.ACTION_CALL).apply {
                data = Uri.parse("tel:${contacto.telefono}")
                flags = Intent.FLAG_ACTIVITY_NEW_TASK
            }

            Log.d(tag, "‚òéÔ∏è Iniciando llamada a: ${contacto.telefono}")
            context.startActivity(intent)

            Log.d(tag, "‚úÖ Llamada de emergencia iniciada a: ${contacto.nombre}")

            Handler(Looper.getMainLooper()).post {
                Toast.makeText(context, "‚òéÔ∏è LLAMANDO: ${contacto.nombre}", Toast.LENGTH_LONG).show()
            }

            // Notificar al sistema
            EventBus.getDefault().post(ContactoEmergenciaEvent(
                contacto.nombre,
                contacto.telefono,
                "LLAMADA"
            ))

            Log.d(tag, "üì® Evento ContactoEmergenciaEvent enviado (LLAMADA)")

        } catch (e: Exception) {
            Log.e(tag, "‚ùå CR√çTICO: Error al realizar llamada de emergencia", e)
            Handler(Looper.getMainLooper()).post {
                Toast.makeText(context, "‚ùå ERROR AL LLAMAR", Toast.LENGTH_LONG).show()
            }
        }
    }


    fun procesarPostergacionMedicamento(
        medicamentoId: Long,
        nombreMedicamento: String,
        fechaHoraOriginal: Long,
        numeroPostergacion: Int
    ) {
        Log.d(tag, "üîÑ Procesando postergaci√≥n de medicamento...")
        Log.i(tag, "üÜî ID: $medicamentoId")
        Log.i(tag, "üíä Nombre: $nombreMedicamento")
        Log.i(tag, "üî¢ Postergaci√≥n #: $numeroPostergacion")

        val tiempoTranscurrido = ((System.currentTimeMillis() - fechaHoraOriginal) / (1000 * 60)).toInt()
        Log.i(tag, "‚è±Ô∏è Tiempo calculado: $tiempoTranscurrido minutos")

        val event = MedicamentoPostergadoEvent(
            medicamentoId = medicamentoId,
            nombreMedicamento = nombreMedicamento,
            tiempoPostergado = tiempoTranscurrido,
            fechaHoraOriginal = fechaHoraOriginal,
            numeroPostergacion = numeroPostergacion
        )

        Log.d(tag, "üì® Enviando evento MedicamentoPostergadoEvent...")
        EventBus.getDefault().post(event)
        Log.d(tag, "‚úÖ Evento enviado correctamente")
    }

    fun procesarMedicamentoNoTomado(
        medicamentoId: Long,
        nombreMedicamento: String,
        fechaHoraOriginal: Long
    ) {
        Log.d(tag, "‚ö†Ô∏è Procesando medicamento no tomado...")
        Log.i(tag, "üÜî ID: $medicamentoId")
        Log.i(tag, "üíä Nombre: $nombreMedicamento")

        val tiempoTranscurrido = ((System.currentTimeMillis() - fechaHoraOriginal) / (1000 * 60)).toInt()
        Log.i(tag, "‚è±Ô∏è Tiempo sin tomar: $tiempoTranscurrido minutos")

        val event = MedicamentoNoTomadoEvent(
            medicamentoId = medicamentoId,
            nombreMedicamento = nombreMedicamento,
            fechaHoraOriginal = fechaHoraOriginal,
            tiempoTranscurrido = tiempoTranscurrido
        )

        Log.d(tag, "üì® Enviando evento MedicamentoNoTomadoEvent...")
        EventBus.getDefault().post(event)
        Log.d(tag, "‚úÖ Evento enviado correctamente")
    }

    fun destruir() {
        try {
            EventBus.getDefault().unregister(this)
            coroutineScope.cancel()
            Log.d(tag, "‚úÖ Agente de Emergencia destruido correctamente")

            Handler(Looper.getMainLooper()).post {
                Toast.makeText(context, "üî¥ Sistema emergencia detenido", Toast.LENGTH_SHORT).show()
            }
        } catch (e: Exception) {
            Log.e(tag, "‚ùå Error al destruir Agente de Emergencia", e)
        }
    }
}

// === SERVICIO ACTUALIZADO ===
class ServicioMonitorMedicamentosActualizado : Service() {

    private val tag = "ServicioMonitor"
    private lateinit var agenteEmergencia: AgenteEmergenciaComunicacion
    private lateinit var dbHelper: MedicamentosDBHelper
    private lateinit var handler: Handler
    private val intervaloChequeo = 2 * 60 * 1000L // 2 minutos para mayor precisi√≥n

    @Subscribe(threadMode = ThreadMode.MAIN)
    fun onContactoEmergencia(event: ContactoEmergenciaEvent) {
        Log.d(tag, "üìû Acci√≥n de emergencia realizada: ${event.tipoAccion} a ${event.contactoNombre}")
        Toast.makeText(this, "üö® ${event.tipoAccion}: ${event.contactoNombre}", Toast.LENGTH_SHORT).show()
    }

    private val runnable = object : Runnable {
        override fun run() {
            Log.d(tag, "üîç Ejecutando verificaci√≥n de medicamentos...")
            verificarMedicamentosEmergencia()
            handler.postDelayed(this, intervaloChequeo)
            Log.d(tag, "‚è∞ Pr√≥xima verificaci√≥n en ${intervaloChequeo/1000/60} minutos")
        }
    }

    override fun onCreate() {
        super.onCreate()
        Log.d(tag, "üöÄ Iniciando ServicioMonitorMedicamentos...")

        try {
            agenteEmergencia = AgenteEmergenciaComunicacion(this)
            dbHelper = MedicamentosDBHelper(this)
            handler = Handler(Looper.getMainLooper())

            // Registrarse para escuchar eventos
            EventBus.getDefault().register(this)

            Log.d(tag, "‚úÖ Servicio iniciado correctamente")
            Log.i(tag, "üìä Intervalo de chequeo: ${intervaloChequeo/1000/60} minutos")

            // Iniciar monitoreo
            handler.post(runnable)
            Log.d(tag, "‚úÖ Monitoreo autom√°tico iniciado")

            Toast.makeText(this, "‚úÖ Monitor emergencia activo", Toast.LENGTH_SHORT).show()

        } catch (e: Exception) {
            Log.e(tag, "‚ùå Error al iniciar servicio", e)
            Toast.makeText(this, "‚ùå Error monitor emergencia", Toast.LENGTH_LONG).show()
        }
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        Log.d(tag, "üîÑ onStartCommand llamado - startId: $startId")
        return START_STICKY // Reiniciar si el sistema mata el servicio
    }

    private fun verificarMedicamentosEmergencia() {
        try {
            Log.d(tag, "üîç Obteniendo recordatorios de emergencia...")
            val recordatoriosEmergencia = dbHelper.obtenerRecordatoriosParaEmergencia()
            val tiempoActual = System.currentTimeMillis()

            Log.i(tag, "üìä Recordatorios encontrados: ${recordatoriosEmergencia.size}")

            for (recordatorio in recordatoriosEmergencia) {
                val tiempoTranscurrido = ((tiempoActual - recordatorio.fechaOriginal) / (1000 * 60)).toInt()

                Log.d(tag, "üíä Analizando: ${recordatorio.nombreMedicamento}")
                Log.d(tag, "‚è±Ô∏è Tiempo transcurrido: $tiempoTranscurrido min")
                Log.d(tag, "üîÑ Postergaciones: ${recordatorio.numeroPostergaciones}")
                Log.d(tag, "üìß Notificaci√≥n enviada: ${recordatorio.notificacionEnviada}")

                // L√≥gica de emergencia
                when {
                    // 45+ minutos sin tomar y no se ha enviado notificaci√≥n
                    tiempoTranscurrido >= 20 && !recordatorio.notificacionEnviada -> {
                        Log.w(tag, "‚ö†Ô∏è ACTIVANDO PROTOCOLO DE 45 MINUTOS")

                        if (recordatorio.numeroPostergaciones > 0) {
                            Log.i(tag, "üîÑ Procesando como postergaci√≥n m√∫ltiple")
                            agenteEmergencia.procesarPostergacionMedicamento(
                                recordatorio.medicamentoId,
                                recordatorio.nombreMedicamento,
                                recordatorio.fechaOriginal,
                                recordatorio.numeroPostergaciones
                            )
                        } else {
                            Log.i(tag, "‚ùó Procesando como primera detecci√≥n no tomado")
                            agenteEmergencia.procesarMedicamentoNoTomado(
                                recordatorio.medicamentoId,
                                recordatorio.nombreMedicamento,
                                recordatorio.fechaOriginal
                            )
                        }

                        // Marcar que se envi√≥ notificaci√≥n
                        dbHelper.marcarNotificacionEnviada(recordatorio.id)
                        Log.d(tag, "‚úÖ Notificaci√≥n marcada como enviada")
                    }

                    // 60+ minutos (1 hora) = llamada de emergencia
                    tiempoTranscurrido >= 60 && recordatorio.numeroPostergaciones >= 4 -> {
                        Log.e(tag, "üÜò ACTIVANDO PROTOCOLO CR√çTICO DE 60 MINUTOS")

                        agenteEmergencia.procesarPostergacionMedicamento(
                            recordatorio.medicamentoId,
                            recordatorio.nombreMedicamento,
                            recordatorio.fechaOriginal,
                            recordatorio.numeroPostergaciones
                        )

                        // Marcar como notificaci√≥n enviada para evitar spam
                        dbHelper.marcarNotificacionEnviada(recordatorio.id)
                        Log.d(tag, "‚úÖ Llamada de emergencia marcada")
                    }

                    else -> {
                        Log.d(tag, "üìä Sin acci√≥n requerida para este medicamento")
                    }
                }
            }

            Log.d(tag, "‚úÖ Verificaci√≥n completada")

        } catch (e: Exception) {
            Log.e(tag, "‚ùå Error durante verificaci√≥n de medicamentos", e)
        }
    }

    override fun onDestroy() {
        Log.d(tag, "üî¥ Deteniendo ServicioMonitorMedicamentos...")

        try {
            handler.removeCallbacks(runnable)
            EventBus.getDefault().unregister(this)
            agenteEmergencia.destruir()

            Log.d(tag, "‚úÖ Servicio detenido correctamente")
            Toast.makeText(this, "üî¥ Monitor detenido", Toast.LENGTH_SHORT).show()

        } catch (e: Exception) {
            Log.e(tag, "‚ùå Error al detener servicio", e)
        }

        super.onDestroy()
    }

    override fun onBind(intent: Intent?): IBinder? = null
}

// === INTEGRACI√ìN CON TU SISTEMA DE ALARMAS ===

// === CONFIGURACI√ìN DE TELEGRAM EN ACTIVIDAD ===
class ConfiguracionEmergenciaActivity : AppCompatActivity() {

    private val tag = "ConfigEmergencia"
    private lateinit var agenteEmergencia: AgenteEmergenciaComunicacion

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        Log.d(tag, "üöÄ Iniciando ConfiguracionEmergenciaActivity...")

        try {
            agenteEmergencia = AgenteEmergenciaComunicacion(this)

            // Registrarse para eventos
            EventBus.getDefault().register(this)
            Log.d(tag, "‚úÖ EventBus registrado")

            configurarTelegram()
            iniciarServicioMonitoreo()

            Log.d(tag, "‚úÖ Actividad iniciada correctamente")
            Toast.makeText(this, "‚úÖ Sistema configurado", Toast.LENGTH_SHORT).show()

        } catch (e: Exception) {
            Log.e(tag, "‚ùå Error al iniciar actividad", e)
            Toast.makeText(this, "‚ùå Error en configuraci√≥n", Toast.LENGTH_LONG).show()
        }
    }

    private fun configurarTelegram() {
        Log.d(tag, "üîß Configurando Telegram...")

        try {
            // Aqu√≠ deber√≠as implementar una interfaz para que el usuario configure
            // su bot de Telegram y chat ID. Por ahora uso valores de ejemplo:

            val botToken = obtenerTokenTelegram() // Desde SharedPreferences o configuraci√≥n
            val chatId = obtenerChatIdTelegram()   // Desde SharedPreferences o configuraci√≥n

            Log.d(tag, "ü§ñ Token obtenido: ${if (botToken.isNotEmpty()) "‚úÖ S√≠" else "‚ùå No"}")
            Log.d(tag, "üí¨ Chat ID obtenido: ${if (chatId.isNotEmpty()) "‚úÖ S√≠" else "‚ùå No"}")

            if (botToken.isNotEmpty() && chatId.isNotEmpty()) {
                agenteEmergencia.configurarTelegram(botToken, chatId)
                Log.d(tag, "‚úÖ Telegram configurado correctamente")
            } else {
                Log.w(tag, "‚ö†Ô∏è Telegram no configurado - faltan datos")
                Toast.makeText(this, "‚ö†Ô∏è Configurar Telegram", Toast.LENGTH_SHORT).show()
            }
        } catch (e: Exception) {
            Log.e(tag, "‚ùå Error al configurar Telegram", e)
        }
    }

    private fun obtenerTokenTelegram(): String {
        try {
            val prefs = getSharedPreferences("emergencia_config", MODE_PRIVATE)
            val token = prefs.getString("telegram_bot_token", "") ?: ""
            Log.d(tag, "üì± Token desde prefs: ${token.take(10)}${if (token.length > 10) "..." else ""}")
            return token
        } catch (e: Exception) {
            Log.e(tag, "‚ùå Error al obtener token", e)
            return ""
        }
    }

    private fun obtenerChatIdTelegram(): String {
        try {
            val prefs = getSharedPreferences("emergencia_config", MODE_PRIVATE)
            val chatId = prefs.getString("telegram_chat_id", "") ?: ""
            Log.d(tag, "üí¨ Chat ID desde prefs: $chatId")
            return chatId
        } catch (e: Exception) {
            Log.e(tag, "‚ùå Error al obtener chat ID", e)
            return ""
        }
    }

    fun guardarConfiguracionTelegram(botToken: String, chatId: String) {
        Log.d(tag, "üíæ Guardando configuraci√≥n Telegram...")

        try {
            val prefs = getSharedPreferences("emergencia_config", MODE_PRIVATE)
            prefs.edit()
                .putString("telegram_bot_token", botToken)
                .putString("telegram_chat_id", chatId)
                .apply()

            agenteEmergencia.configurarTelegram(botToken, chatId)

            Log.d(tag, "‚úÖ Configuraci√≥n guardada correctamente")
            Toast.makeText(this, "‚úÖ Telegram configurado", Toast.LENGTH_SHORT).show()

        } catch (e: Exception) {
            Log.e(tag, "‚ùå Error al guardar configuraci√≥n", e)
            Toast.makeText(this, "‚ùå Error al guardar config", Toast.LENGTH_SHORT).show()
        }
    }

    private fun iniciarServicioMonitoreo() {
        Log.d(tag, "üîÑ Iniciando servicio de monitoreo...")

        try {
            val intent = Intent(this, ServicioMonitorMedicamentosActualizado::class.java)
            startService(intent)

            Log.d(tag, "‚úÖ Servicio iniciado correctamente")
        } catch (e: Exception) {
            Log.e(tag, "‚ùå Error al iniciar servicio", e)
            Toast.makeText(this, "‚ùå Error servicio monitor", Toast.LENGTH_SHORT).show()
        }
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    fun onContactoEmergencia(event: ContactoEmergenciaEvent) {
        Log.d(tag, "üìû Evento emergencia recibido: ${event.tipoAccion}")
        Log.i(tag, "üë§ Contacto: ${event.contactoNombre}")
        Log.i(tag, "üì± Tel√©fono: ${event.contactoTelefono}")

        val mensaje = when (event.tipoAccion) {
            "MENSAJE" -> "üì§ Mensaje enviado a ${event.contactoNombre}"
            "LLAMADA" -> "‚òéÔ∏è Llamando a ${event.contactoNombre}"
            else -> "üö® Acci√≥n de emergencia realizada"
        }

        // Mostrar notificaci√≥n al usuario
        Toast.makeText(this, mensaje, Toast.LENGTH_LONG).show()

        // Tambi√©n podr√≠as mostrar una notificaci√≥n persistente
        mostrarNotificacionEmergencia(mensaje)

        Log.d(tag, "‚úÖ Evento procesado correctamente")
    }

    private fun mostrarNotificacionEmergencia(mensaje: String) {
        Log.d(tag, "üîî Creando notificaci√≥n de emergencia...")

        try {
            val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager

            // Crear canal de notificaci√≥n para emergencias
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                val channel = NotificationChannel(
                    "emergencia_channel",
                    "Emergencias Medicamentos",
                    NotificationManager.IMPORTANCE_HIGH
                ).apply {
                    description = "Notificaciones cr√≠ticas de medicamentos"
                }
                notificationManager.createNotificationChannel(channel)
                Log.d(tag, "üì¢ Canal de notificaci√≥n creado")
            }

            val notification = NotificationCompat.Builder(this, "emergencia_channel")
                .setSmallIcon(android.R.drawable.ic_dialog_alert) // Cambiado por icono del sistema
                .setContentTitle("üö® Emergencia Medicamento")
                .setContentText(mensaje)
                .setPriority(NotificationCompat.PRIORITY_HIGH)
                .setAutoCancel(true)
                .setDefaults(NotificationCompat.DEFAULT_ALL)
                .build()

            notificationManager.notify(999, notification)

            Log.d(tag, "‚úÖ Notificaci√≥n mostrada correctamente")

        } catch (e: Exception) {
            Log.e(tag, "‚ùå Error al mostrar notificaci√≥n", e)
        }
    }

    override fun onDestroy() {
        Log.d(tag, "üî¥ Destruyendo ConfiguracionEmergenciaActivity...")

        try {
            EventBus.getDefault().unregister(this)
            agenteEmergencia.destruir()

            Log.d(tag, "‚úÖ Actividad destruida correctamente")

        } catch (e: Exception) {
            Log.e(tag, "‚ùå Error al destruir actividad", e)
        }

        super.onDestroy()
    }

    // === M√âTODOS PARA TESTING Y DEBUGGING ===

    fun testearSistemaEmergencia() {
        Log.d(tag, "üß™ INICIANDO TEST DEL SISTEMA...")

        // Simular medicamento postergado m√∫ltiples veces
        agenteEmergencia.procesarPostergacionMedicamento(
            medicamentoId = 123L,
            nombreMedicamento = "Aspirina TEST",
            fechaHoraOriginal = System.currentTimeMillis() - (50 * 60 * 1000), // 50 minutos atr√°s
            numeroPostergacion = 3
        )

        Log.d(tag, "‚úÖ Test iniciado - revisar logs para ver el flujo")
        Toast.makeText(this, "üß™ Test sistema iniciado", Toast.LENGTH_SHORT).show()
    }

    fun verificarEstadoSistema(): String {
        val estado = StringBuilder()

        estado.append("üîç ESTADO DEL SISTEMA:\n")
        estado.append("‚Ä¢ EventBus: ${if (EventBus.getDefault().isRegistered(this)) "‚úÖ" else "‚ùå"}\n")
        estado.append("‚Ä¢ Agente: ${if (::agenteEmergencia.isInitialized) "‚úÖ" else "‚ùå"}\n")
        estado.append("‚Ä¢ Telegram: ${if (obtenerTokenTelegram().isNotEmpty()) "‚úÖ" else "‚ùå"}\n")

        val estadoFinal = estado.toString()
        Log.i(tag, estadoFinal)
        Toast.makeText(this, "Ver logs para estado completo", Toast.LENGTH_SHORT).show()

        return estadoFinal
    }
}